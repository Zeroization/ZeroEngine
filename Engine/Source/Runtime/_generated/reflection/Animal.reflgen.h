// Generated by inja template engine.
// This file is used for supporting reflection, don't modify it !!
#pragma once
// Auto-generated include files:
#include "Core\Reflection\Example\Animal.h"

namespace ZeroEngine::Reflection
{
    // Auto-generated class reflection data
    // Class: Animal
    class TypeAnimalOperator
    {
    public:
        // Class
        static const char* GetClassName() { return "Animal"; }

        // Base class
        static void GetBaseClassNameList_Animal(std::vector<std::string>& baseClassNameList)
        {
        }

        // Fields 
        // Field: int age
        static const char* GetFieldName_age() { return "age"; }
        static const char* GetFieldTypeName_age() { return "int"; }
        static int Set_age(Animal& type, const int& value) { return type.age = value; }
        static int Get_age(const Animal& type) { return type.age; }
        static bool isSequence_age() { return false; }
        static bool isAssociate_age() { return false; }

        // Methods 
        // Method: void Fuck()
        // static const char* GetMethodName_Fuck() { return "Fuck"; }

    // Register to reflection system
    static void TypeWrapperRegister_Animal()
    {
        // Register class itself
        ZERO_REFL_REGISTER_CLASS(Animal);


        // Register class constructor
        ZERO_REFL_REGISTER_CTOR_BY_ARGS(Animal);

        // Register field members and variables
        ZERO_REFL_REGISTER_VARIABLE(Animal, Animal::age, &Animal::age);
        // ZERO_REFL_REGISTER_VARIABLE_BY_GETTER_AND_SETTER(Animal, &TypeFieldReflectionOperator::TypeAnimalOperator::Get_age, &TypeFieldReflectionOperator::TypeAnimalOperator::Set_age);

        // Register function and methods
        ZERO_REFL_REGISTER_FUNCTION_NO_ARGS(Animal, Animal::Fuck, &Animal::Fuck);
    }
};

namespace TypeWrapperRegister
{
    // auto-generated total register
    void Register_Animal()
    {
        TypeAnimalOperator::TypeWrapperRegister_Animal();
    }
} // namespace ZeroEngine::Reflection::TypeWrapperRegister
} // namespace ZeroEngine::Reflection

// For json based serialize/deserialize
namespace nlohmann
{
    template<>
    struct adl_serializer<Animal>
    {
        static void to_json(json& ctx, const Animal& instance)
        {
            // Register field members and variables
            ctx["age"] = instance.age;
        }

        static void from_json(const json& ctx, Student& instance)
        {
            instance.age = ctx.at("age").get<int>();
        }
    };
} // namespace nlohmann

