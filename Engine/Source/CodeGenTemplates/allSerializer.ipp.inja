// allSerializer.ipp, Generated by inja template engine.
// This file is used for supporting serialization, don't modify it !!
#pragma once
// Auto-generated include files:
## for include_header_file in include_header_files
#include "{{ include_header_file }}"
## endfor

namespace ZeroEngine
{
    // Auto-generated writers & readers
## for class_def in class_defines
    // =========================== {{ class_def.class_name }} ===========================
    template<>
    Json Serializer::Write(const {{ class_def.class_name }}& instance)
    {
        Json::object retContext;
## if class_def.class_has_base
        // Base class defines:
## for base_class_def in class_def.class_base_class_defines
        auto&& jsonContext_{{ base_class_def.class_base_class_index }} = Serializer::Write(*({{ base_class_def.class_base_class_name }}*)& instance);
        assert(jsonContext_{{ base_class_def.class_base_class_index }}.is_object());
        auto&& jsonContextMap_{{ base_class_def.class_base_class_index }} = jsonContext_{{ base_class_def.class_base_class_index }}.object_items();
        retContext.insert(jsonContextMap_{{ base_class_def.class_base_class_index }}.begin(),
                          jsonContextMap_{{ base_class_def.class_base_class_index }}.end());
## endfor
## endif

        // Field defines:
## for field_def in class_def.class_field_defines
## if field_def.class_field_is_sequence
        Json::array {{ field_def.class_field_name }}_json;
        for (const auto& item : instance.{{ field_def.class_field_name }})
        {
            {{ field_def.class_field_name }}_json.emplace_back(Serializer::Write(item));
        }
        retContext.insert_or_assign("{{ field_def.class_field_display_name }}",
                                    {{ field_def.class_field_name }}_json);
{# TODO: else if field_def.class_field_is_map #}
## else
        retContext.insert_or_assign("{{ field_def.class_field_display_name }}",
                                    Serializer::Write(instance.{{ field_def.class_field_name }}));
## endif
## endfor
{# TODO: // Method defines #}

        return Json(retContext);
    }

    template<>
    {{ class_def.class_name }}& Serializer::Read(const Json& jsonContext, {{ class_def.class_name }}& instance)
    {
        assert(jsonContext.is_object());
## if class_def.class_has_base
        // Base class defines
## for base_class_def in class_def.class_base_class_defines
        Serializer::Read(jsonContext, *({{ base_class_def.class_base_class_name }}*)& instance);
## endfor
## endif

        // Field defines
## for field_def in class_def.class_field_defines
        if (!jsonContext["{{ field_def.class_field_display_name }}"].is_null())
        {
## if field_def.class_field_is_sequence
            assert(jsonContext["{{ field_def.class_field_display_name }}"].is_sequence());
            Json::array array_{{ field_def.class_field_name }} = jsonContext["{{ field_def.class_field_display_name }}"].array_items();
            instance.{{ field_def.class_field_name }}.resize(array_{{ field_def.class_field_name }}.size());
            for (size_t index = 0; index < array_{{ field_def.class_field_name }}.size(); ++index)
            {
                Serializer::Read(array_{{ field_def.class_field_name }}[index],
                                 instance.{{ field_def.class_field_name }}[index]);
            }
{# TODO: else if field_def.class_field_is_map #}
## else
            Serializer::Read(jsonContext["{{ field_def.class_field_display_name }}"],
                             instance.{{ field_def.class_field_name }});
## endif
{# TODO: // Method defines #}

            return instance;
        }
## endfor
    }
    // =========================== {{ class_def.class_name }} ===========================
## endfor
} // namespace ZeroEngine
